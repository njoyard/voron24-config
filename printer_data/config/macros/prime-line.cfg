[gcode_macro PRIMELINE]
gcode:
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set travel_speed = vars.travel_speed %}
  {% set z_drop_speed = vars.z_drop_speed %}
  {% set prime_line_length = vars.prime_line_length %}
  {% set prime_line_purge_distance = vars.prime_line_purge_distance %}
  {% set prime_line_flowrate = vars.prime_line_flowrate %}
  {% set prime_line_height = vars.prime_line_height %}
  {% set prime_line_margin = vars.prime_line_margin %}
  {% set prime_line_unretract_length = vars.print_unretract %}
  {% set prime_line_wipe = vars.prime_line_wipe %}
  {% set prime_line_x, prime_line_y = vars.prime_line_start | map('float') %}

  # Bed center
  {% set center_x, center_y = [printer.toolhead.axis_maximum.x / 2, printer.toolhead.axis_maximum.y / 2] | map('float') %}

  # Extruder filament data
  {% set extruder = printer["configfile"].config["extruder"] %}
  {% set max_extrude_cross_section = extruder["max_extrude_cross_section"]|float %}
  {% set filament_diameter = extruder["filament_diameter"]|float %}
  
  # Compute prime volume and width
  {% set prime_line_wipe_length = prime_line_length * 0.8 %}
  {% set purge_volume = prime_line_purge_distance * 3.14159 * (filament_diameter / 2)**2 %}
  {% set line_width = purge_volume / (prime_line_height * prime_line_length) %}
  
  # Validate and fix cross-section
  {% if (prime_line_height * line_width) > max_extrude_cross_section %}
    VERBOSE MSG="WARNING: prime_line_purge_distance=%.4f mm too high (will exceed max_extrude_cross_section)" % prime_line_purge_distance
    
    {% set prime_line_purge_distance = 0.98 * (max_extrude_cross_section * prime_line_length) / (3.14159 * (filament_diameter / 2)**2) %}
    {% set purge_volume = prime_line_purge_distance * 3.14159 * (filament_diameter / 2)**2 %}
    {% set line_width = purge_volume / (prime_line_height * prime_line_length) %}
    
    VERBOSE MSG="Corrected to prime_line_purge_distance=%.4f mm" % prime_line_purge_distance
  {% endif %}

  # Validate cross-section ratio
  {% if (prime_line_height / line_width) >= 0.5 %}
    {action_raise_error("Prime line too thin to stick to the bed. Increase purge distance or decrease length.")}
  {% endif %}

  # Compute travel feed rates
  {% set St = travel_speed * 60 %}
  {% set Sz = z_drop_speed * 60 %}

  # Compute extrusion feed rate
  {% set speed = (prime_line_flowrate / (prime_line_height * line_width)) * 60 | float %}

  # Compute line start XY from exclude_objects if present
  {% if printer.exclude_object is defined and printer.exclude_object.objects%}
    {% set points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set print_x_min = points | map(attribute=0) | min %}
    {% set print_y_min = points | map(attribute=1) | min %}
    {% set print_x_max = points | map(attribute=0) | max %}
    {% set print_y_max = points | map(attribute=1) | max %}
    
    {% set prime_line_x =
        2*center_x - prime_line_x
        if (prime_line_x > center_x and print_x_max < center_x)
        or (prime_line_x < center_x and print_x_min > center_x) 
        else prime_line_x %}
    {% set prime_line_y =
        2*center_y - prime_line_y
        if (prime_line_y > center_y and print_y_max < center_y)
        or (prime_line_y < center_y and print_y_min > center_y) 
        else prime_line_y %}
    {% set prime_line_x = [[prime_line_x, print_x_min - prime_line_margin] | max, print_x_max + prime_line_margin] | min %}
    {% set prime_line_y = [[prime_line_y, print_y_min - prime_line_margin] | max, print_y_max + prime_line_margin] | min %}
  {% endif %}

  # Determine direction based on relative position of start to center
  {% set prime_line_way = -1 if (prime_line_x > center_x) else 1 %}

  G91
  M83
  {% if (printer.toolhead.position.z < 5) %}
    G1 Z5 F{Sz}
  {% endif %}

  # Starting position
  G90
  G0 X{prime_line_x} Y{prime_line_y} F{St}
  G1 Z{prime_line_height} F{Sz | int / 2}

  # Add pressure in the nozzle
  G92 E0
  G1 E{prime_line_unretract_length} F300

  # Prime line
  G92 E0
  G1 X{prime_line_x + prime_line_way*prime_line_length} E{prime_line_purge_distance} F{speed}
  {% if prime_line_wipe %}
    G0 X{prime_line_x + prime_line_way*prime_line_wipe_length} F{St}
  {% endif %}

  # Retract and Z-hop
  G92 E0
  G1 E-0.2 F2100
  G92 E0
  G1 Z3 F{Sz}

  # Additional small movement to get out of the line as some slicers directly emmit
  # a Z- move as a first step that make the toolhead crash back in the line and get dirty
  G91
  G1 X2 Y2 F{St}
  G90
  
  # Flushing Klipper's buffer to ensure the primeline sequence is done before continuing
  M400
