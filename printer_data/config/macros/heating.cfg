[gcode_macro _HEAT_STATS]
variable_chamber_target: 0
variable_chamber_seconds: 0
variable_bed_seconds: 0
variable_hotend_seconds: 0
gcode:

[delayed_gcode HEAT_TRACK]
initial_duration: 1
gcode:
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set stats = printer["gcode_macro _HEAT_STATS"] %}

  {% set interval = vars.heat_track_interval %}
  {% set margin = vars.heat_margin %}
  {% set chamber_sensor = vars.print_chamber_sensor %}

  {% set temps = {
    "bed": printer.heater_bed.temperature | float,
    "chamber": printer["temperature_sensor %s" % (chamber_sensor,)].temperature | float,
    "hotend": printer[printer.toolhead.extruder].temperature | float
  } %}

  {% set targets = {
    "bed": printer.heater_bed.target | float,
    "chamber": stats.chamber_target,
    "hotend": printer[printer.toolhead.extruder].target | float
  } %}

  {% for heater in ("bed", "chamber", "hotend") %}
    {% if targets[heater] > 0 and temps[heater] > targets[heater] - margin %}
      SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE={heater}_seconds VALUE={stats["%s_seconds" % (heater,)] + interval}
    {% else %}
      SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE={heater}_seconds VALUE=0
    {% endif %}
  {% endfor %}

  UPDATE_DELAYED_GCODE ID=HEAT_TRACK DURATION={interval}

[gcode_macro _HEAT_SET_TARGET]
gcode:
  {% set heater = params.HEATER %}
  {% set target = params.TARGET | float %}

  {% if heater == 'chamber' %}
    SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE={heater}_target VALUE={target}
    {% if (printer.heater_bed.target | float) < target %}
      M140 S{target}
    {% endif %}
  {% elif heater == 'bed' %}
    M140 S{target}
  {% elif heater == 'hotend' %}
    M104 S{target}
  {% endif %}

  {% if target == 0 %}
    SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE={heater}_seconds VALUE=0
    SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE=confirmed VALUE=1
  {% else %}
    SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE=confirmed VALUE=0
  {% endif %}


[gcode_macro _HEAT_WAIT]
gcode:
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set stats = printer["gcode_macro _HEAT_STATS"] %}

  {% set heater = params.HEATER %}
  {% set seconds = params.SECONDS | default(vars['heat_%s_seconds' % (heater,)]) | float %}

  {% set interval = vars.heat_track_interval %}
  {% set margin = vars.heat_margin %}

  {% set targets = {
    "bed": printer.heater_bed.target | float,
    "chamber": stats.chamber_target,
    "hotend": printer[printer.toolhead.extruder].target | float
  } %}

  {% set sensors = {
    "bed": "heater_bed",
    "chamber": vars.print_chamber_sensor,
    "hotend": "extruder"
  } %}

  SET_GCODE_VARIABLE MACRO=_HEAT_WAIT_ONCE VARIABLE=finished VALUE=0
  TEMPERATURE_WAIT SENSOR={sensors[heater]} MINIMUM={targets[heater] - margin}
  _HEAT_WAIT_SECONDS HEATER={heater}

[gcode_macro _HEAT_WAIT_SECONDS]
gcode:
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set stats = printer["gcode_macro _HEAT_STATS"] %}

  {% set interval = vars.heat_track_interval %}

  {% set seconds = {
    "bed": vars.heat_bed_seconds,
    "chamber": vars.heat_chamber_seconds,
    "hotend": vars.heat_hotend_seconds
  } %}

  {% set current = {
    "bed": stats.bed_seconds,
    "chamber": stats.chamber_seconds,
    "hotend": stats.hotend_seconds
  } %}

  {% set remaining = seconds[heater] - current[heater] %}
  {% if remaining > 0 %}
    {% set wait = interval * ((remaining / interval) | int) %}
    INFO MSG="Waiting {wait} more seconds for {heater}"
    G4 P{1000 * wait}
  {% endif %}

[gcode_macro HEATSOAK]
gcode: 
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}

  {% set bed = params.BED | default(vars.heatsoak_default_bed) | float %}
  {% set chamber = params.CHAMBER | default(vars.heatsoak_default_chamber) | float %}

  _SET_LIGHT_STATUS STATUS=heatsoak
  _PREHEAT BED={bed} CHAMBER={chamber}
  _SET_LIGHT_STATUS STATUS=idle SET_TIMEOUT=1

  # TODO setup some kind of timeout here (for bed heating / filter fan)

[gcode_macro _PREHEAT]
gcode:
  {% set bed = params.BED | float %}
  {% set chamber = params.CHAMBER | default(0) | float %}

  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set maxtime = vars.print_preheat_max_minutes %}
  {% set interval = vars.print_preheat_interval %}
  {% set chamber_sensor = vars.print_chamber_sensor %}
  {% set bed_time = vars.heatsoak_bed_wait_minutes %}
  {% set bed_thrs = vars.heatsoak_bed_wait_threshold %}

  {% set current_ch_temp = printer["temperature_sensor %s" % (chamber_sensor,)].temperature | float %}
  {% set current_bed_temp = printer.heater_bed.temperature | float %}

  {% set need_bed_heatsoak = bed >= bed_thrs and current_bed_temp < bed_thrs %}

  {% if current_ch_temp < chamber  %}
    {% if need_bed_heatsoak %}
      INFO MSG="Heat-soaking chamber to {chamber}°C and bed for {bed_time} minutes..."
    {% else %}
      INFO MSG="Heat-soaking chamber to {chamber}°C..."
    {% endif %}

    # Set bed temp
    M140 S{bed}
    _FILTER_CHECK

    # Move toolhead to front center to get a proper idea of chamber temp
    _CG28
    _PARK_TOOLHEAD POS=heatsoak

    # Wait for chamber temp
    _WAIT_CHAMBER_TEMP CHAMBER={chamber} BED={bed}

    INFO MSG="Heat-soak complete."
    _NOTIFY MSG="Heat-soak complete."
  {% elif need_bed_heatsoak %}
    INFO MSG="Chamber at {current_ch_temp}°C, heat-soaking bed for {bed_time} minutes..."
    
    # Set bed temp
    M140 S{bed}
    _FILTER_CHECK

    # Wait for bed temp
    M190 S{bed}
    _FILTER_CHECK

    # Wait for configured bed wait time
    G4 P{bed_time * 60000}

    INFO MSG="Heat-soak complete."
    _NOTIFY MSG="Heat-soak complete."
  {% else %}
    # Set bed temp
    M140 S{bed}

    _FILTER_CHECK
    INFO MSG="Heat-soak not needed, chamber at {current_ch_temp}°C and bed is hot."
  {% endif %}

[gcode_macro _HEAT]
gcode:
  {% set bed = params.BED | float %}
  {% set hotend = params.HOTEND | float %}

  INFO MSG="Heating up..."

  M104 S{hotend}
  M140 S{bed}
  _FILTER_CHECK

  M109 S{hotend}
  M190 S{bed}
  _FILTER_CHECK

[gcode_macro _WAIT_CHAMBER_TEMP]
gcode:
  {% set chamber = params.CHAMBER | float %}
  {% set bed = params.BED | float %}
  
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set maxtime = vars.print_preheat_max_minutes %}
  {% set interval = vars.print_preheat_interval %}

  SET_GCODE_VARIABLE MACRO=_WAIT_CHAMBER_TEMP_ONCE VARIABLE=bed_hot_at_iteration VALUE=0

  {% for i in range(1, 1 + (maxtime * 60 / interval) | int) %}
    _WAIT_CHAMBER_TEMP_ONCE ITERATION={i} CHAMBER={chamber} BED={bed}
  {% endfor %}

[gcode_macro _WAIT_CHAMBER_TEMP_ONCE]
variable_bed_hot_at_iteration: 0
gcode:
  {% set iteration = params.ITERATION | int %}
  {% set chamber_target = params.CHAMBER | float %}
  {% set bed_target = params.BED | float %}

  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set chamber_sensor = vars.print_chamber_sensor %}
  {% set interval = vars.print_preheat_interval %}
  {% set bed_time = vars.heatsoak_bed_wait_minutes * 60 %}
  {% set bed_thrs = vars.heatsoak_bed_wait_threshold %}

  {% set chamber_current = printer["temperature_sensor %s" % (chamber_sensor,)].temperature | float %}
  {% set chamber_too_cold = chamber_current < chamber_target %}

  {% set bed_current = printer.heater_bed.temperature %}
  {% set bed_needs_heatsoak = False %}

  {% if bed_target >= bed_thrs %}
    {% if bed_current >= bed_target - 1 and bed_hot_at_iteration == 0 %}
      # Save which iteration the bed was first seen at temperature
      SET_GCODE_VARIABLE MACRO=_WAIT_CHAMBER_TEMP_ONCE VARIABLE=bed_hot_at_iteration VALUE={iteration}
      {% set bed_hot_at_iteration = iteration %}
    {% endif %}

    {% if bed_hot_at_iteration > 1 and iteration < bed_hot_at_iteration + (bed_time / interval) %}
      {% set bed_needs_heatsoak = True %}
    {% endif %}
  {% endif %}

  {% if chamber_too_cold or bed_needs_heatsoak %}
    G4 P{interval * 1000} ; wait interval
    _FILTER_CHECK
  {% endif %}

[delayed_gcode _HOTEND_FAN_CHECK_DELAYED]
gcode:
  _HOTEND_FAN_CHECK
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=3

[gcode_macro _HOTEND_FAN_CHECK]
variable_failure_count: 0
gcode:
  {% set min_rpm = 1000 %}
  {% set max_failures = 3 %}

  {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp | float %}
  {% set rpm = printer['heater_fan hotend_fan'].rpm | float %}
  {% set target = printer[printer.toolhead.extruder].target | float %}
  {% set temp = printer[printer.toolhead.extruder].temperature | float %}
  
  {% if (target >= fan_on_temp) and (temp > fan_on_temp) and (rpm < min_rpm) %}
    SET_GCODE_VARIABLE MACRO=_HOTEND_FAN_CHECK VARIABLE=failure_count VALUE={failure_count + 1}
    RESPOND TYPE=error MSG="Hotend fan detected off for {failure_count + 1} consecutive seconds (fan at {rpm} RPM, hotend at {temp}°C)"

    {% if failure_count + 1 > max_failures %}
      M400 ; wait for pending movements
      CANCEL_PRINT REASON=hotend-fan
    {% endif %}
  {% endif %}

[gcode_macro _ENABLE_HOTEND_FAN_CHECK]
gcode:
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=3

[gcode_macro _DISABLE_HOTEND_FAN_CHECK]
gcode:
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=0
