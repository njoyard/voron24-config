[gcode_macro _HEAT_STATS]
variable_chamber_target: 0
variable_chamber_prev_target: 0
variable_chamber_seconds: 0
variable_bed_seconds: 0
variable_bed_prev_target: 0
variable_hotend_seconds: 0
variable_hotend_prev_target: 0
gcode:

[delayed_gcode HEAT_TRACK]
initial_duration: 1
gcode:
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set stats = printer["gcode_macro _HEAT_STATS"] %}

  {% set interval = vars.heat_track_interval %}
  {% set margin = vars.heat_margin %}
  {% set chamber_sensor = vars.heat_chamber_sensor %}

  {% set temps = {
    "bed": printer.heater_bed.temperature | float,
    "chamber": printer["temperature_sensor %s" % (chamber_sensor,)].temperature | float,
    "hotend": printer[printer.toolhead.extruder].temperature | float
  } %}

  {% set targets = {
    "bed": printer.heater_bed.target | float,
    "chamber": stats.chamber_target,
    "hotend": printer[printer.toolhead.extruder].target | float
  } %}

  {% set prev_targets = {
    "bed": stats.bed_prev_target,
    "chamber": stats.chamber_prev_target,
    "hotend": stats.hotend_prev_target
  } %}

  {% for heater in ("bed", "chamber", "hotend") %}
    VERBOSE MSG="Heater {heater}: temp={temps[heater]}째C target={targets[heater]}째C prev={prev_targets[heater]}째C time={stats['%s_seconds' % (heater,)]}s"

    {% if targets[heater] > 0 %}
      SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE={heater}_prev_target VALUE={targets[heater]}
    {% endif %}

    {% if targets[heater] > 0 and temps[heater] > targets[heater] - margin %}
      SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE={heater}_seconds VALUE={stats["%s_seconds" % (heater,)] + interval}
    {% else %}
      SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE={heater}_seconds VALUE=0
    {% endif %}
  {% endfor %}

  UPDATE_DELAYED_GCODE ID=HEAT_TRACK DURATION={interval}

[gcode_macro _HEAT_SET_TARGET]
gcode:
  {% set heater = params.HEATER %}
  {% set target = params.TARGET | float %}

  {% if heater == 'chamber' %}
    SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE={heater}_target VALUE={target}
    {% if (printer.heater_bed.target | float) < target %}
      M140 S{target}
    {% endif %}
  {% elif heater == 'bed' %}
    M140 S{target}
  {% elif heater == 'hotend' %}
    M104 S{target}
  {% endif %}

  {% if target == 0 %}
    SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE={heater}_seconds VALUE=0
    SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE=confirmed VALUE=1
  {% else %}
    SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE=confirmed VALUE=0
  {% endif %}


[gcode_macro _HEAT_WAIT]
gcode:
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set stats = printer["gcode_macro _HEAT_STATS"] %}

  {% set heater = params.HEATER %}
  {% set seconds = params.SECONDS | default(vars['heat_%s_seconds' % (heater,)]) | float %}

  {% set interval = vars.heat_track_interval %}
  {% set margin = vars.heat_margin %}

  {% set targets = {
    "bed": printer.heater_bed.target | float,
    "chamber": stats.chamber_target,
    "hotend": printer[printer.toolhead.extruder].target | float
  } %}

  {% set sensors = {
    "bed": "heater_bed",
    "chamber": vars.heat_chamber_sensor,
    "hotend": "extruder"
  } %}

  SET_GCODE_VARIABLE MACRO=_HEAT_WAIT_ONCE VARIABLE=finished VALUE=0
  TEMPERATURE_WAIT SENSOR={sensors[heater]} MINIMUM={targets[heater] - margin} MAXIMUM={targets[heater] + margin}
  _HEAT_WAIT_SECONDS HEATER={heater}

[gcode_macro _HEAT_WAIT_SECONDS]
gcode:
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set stats = printer["gcode_macro _HEAT_STATS"] %}

  {% set interval = vars.heat_track_interval %}

  {% set seconds = {
    "bed": vars.heat_bed_seconds,
    "chamber": vars.heat_chamber_seconds,
    "hotend": vars.heat_hotend_seconds
  } %}

  {% set current = {
    "bed": stats.bed_seconds,
    "chamber": stats.chamber_seconds,
    "hotend": stats.hotend_seconds
  } %}

  {% set remaining = seconds[heater] - current[heater] %}
  {% if remaining > 0 %}
    {% set wait = interval * ((remaining / interval) | int) %}
    INFO MSG="Waiting {wait} more seconds for {heater}"
    G4 P{1000 * wait}
  {% endif %}

[gcode_macro HEATSOAK]
gcode: 
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}

  {% set bed = params.BED | default(vars.heatsoak_default_bed) | float %}
  {% set chamber = params.CHAMBER | default(vars.heatsoak_default_chamber) | float %}

  _SET_LIGHT_STATUS STATUS=heatsoak
  _PREHEAT BED={bed} CHAMBER={chamber}
  _SET_LIGHT_STATUS STATUS=idle SET_TIMEOUT=1

  {% if chamber %}
    INFO MSG="Heatsoak complete" NOTIFY=1
  {% endif %}

[gcode_macro _PREHEAT]
gcode:
  {% set bed = params.BED | float %}
  {% set chamber = params.CHAMBER | float %}

  _HEAT_SET_TARGET HEATER=bed TARGET={bed}

  {% if chamber %}
    _HEAT_SET_TARGET HEATER=chamber TARGET={chamber}

    _CG28
    _PARK_TOOLHEAD POS=heatsoak
  {% endif %}

  _FILTER_HEATING
  _HEAT_WAIT HEATER=bed

  {% if chamber %}
    _FILTER_HEATSOAK
    _HEAT_WAIT HEATER=chamber
  {% endif %}

[gcode_macro _HEAT]
gcode:
  {% set hotend = params.HOTEND | float %}

  INFO MSG="Heating up..."

  _HEAT_SET_TARGET HEATER=hotend TARGET={hotend}
  _HEAT_WAIT HEATER=hotend

[gcode_macro _COOLDOWN]
gcode:
  TURN_OFF_HEATERS
  _FILTER_COOLDOWN

[delayed_gcode _HOTEND_FAN_CHECK_DELAYED]
gcode:
  _HOTEND_FAN_CHECK
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=3

[gcode_macro _HOTEND_FAN_CHECK]
variable_failure_count: 0
gcode:
  {% set min_rpm = 1000 %}
  {% set max_failures = 3 %}

  {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp | float %}
  {% set rpm = printer['heater_fan hotend_fan'].rpm | float %}
  {% set target = printer[printer.toolhead.extruder].target | float %}
  {% set temp = printer[printer.toolhead.extruder].temperature | float %}
  
  {% if (target >= fan_on_temp) and (temp > fan_on_temp) and (rpm < min_rpm) %}
    SET_GCODE_VARIABLE MACRO=_HOTEND_FAN_CHECK VARIABLE=failure_count VALUE={failure_count + 1}
    RESPOND TYPE=error MSG="Hotend fan detected off for {failure_count + 1} consecutive seconds (fan at {rpm} RPM, hotend at {temp}째C)"

    {% if failure_count + 1 > max_failures %}
      M400 ; wait for pending movements
      CANCEL_PRINT REASON=hotend-fan
    {% endif %}
  {% endif %}

[gcode_macro _ENABLE_HOTEND_FAN_CHECK]
gcode:
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=3

[gcode_macro _DISABLE_HOTEND_FAN_CHECK]
gcode:
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=0
