[gcode_macro _HEAT_SET_TARGET]
gcode:
  {% set heater = params.HEATER %}
  {% set target = params.TARGET | float %}

  {% if heater == 'chamber' %}
    SET_GCODE_VARIABLE MACRO=_HEAT_STATS VARIABLE={heater}_target VALUE={target}
    {% if (printer.heater_bed.target | float) < target %}
      M140 S{target}
    {% endif %}
  {% elif heater == 'bed' %}
    M140 S{target}
  {% elif heater == 'hotend' %}
    M104 S{target}
  {% endif %}

[gcode_macro HEATSOAK]
gcode:
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}

  {% set bed = params.BED | default(vars.heatsoak_default_bed) | float %}
  {% set chamber = params.CHAMBER | default(vars.heatsoak_default_chamber) | float %}

  _SET_LIGHT_STATUS STATUS=heatsoak
  _PREHEAT BED={bed} CHAMBER={chamber}
  _SET_LIGHT_STATUS STATUS=idle SET_TIMEOUT=1

  {% if chamber %}
    INFO MSG="Heatsoak complete" NOTIFY=1
  {% endif %}

[gcode_macro _PREHEAT]
gcode:
  {% set bed = params.BED | float %}
  {% set chamber = params.CHAMBER | float %}

  {% if chamber %}
    INFO MSG="Heating bed and hotend to {bed}°C and chamber to {chamber}°C"
  {% else %}
    INFO MSG="Heating bed and hotend to {bed}°C"
  {% endif %}

  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set margin = vars.heat_margin %}

  {% set bed_seconds = vars.heat_bed_seconds %}
  {% set chamber_seconds = vars.heat_chamber_seconds %}

  {% if printer.heater_bed.temperature > bed - margin %}
    {% set bed_seconds = 0 %}
    VERBOSE MSG="Skipping bed heatsoak, bed already at {printer.heater_bed.temperature}°C"
  {% endif %}

  {% if chamber and printer["temperature_sensor %s" % (vars.heat_chamber_sensor,)].temperature > chamber - margin %}
    {% set chamber_seconds = 0 %}
    VERBOSE MSG="Skipping chamber heatsoak, chamber already at {printer['temperature_sensor %s' % (vars.heat_chamber_sensor,)].temperature}°C"
  {% endif %}

  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={bed}

  {% if chamber %}
    _CG28
    _PARK_TOOLHEAD POS=heatsoak
  {% endif %}

  _FILTER_HEATING
  VERBOSE MSG="Waiting for bed to reach temperature..."
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed - margin} MAXIMUM={bed + margin}

  {% if chamber %}
    _FILTER_HEATSOAK
    VERBOSE MSG="Waiting for chamber to reach temperature..."
    TEMPERATURE_WAIT SENSOR="temperature_sensor {vars.heat_chamber_sensor}" MINIMUM={chamber - margin}
    {% set heatsoak = [bed_seconds, chamber_seconds] | max %}
  {% else %}
    {% set heatsoak = bed_seconds %}
  {% endif %}

  {% if heatsoak > 0 %}
    {% set m = (heatsoak / 60) | int %}
    {% set s = heatsoak - (m * 60) | int %}

    {% if m == 0 %}
      {% set time = "%ds" % (s,) %}
    {% elif s == 0 %}
      {% set time = "%dm" % (m,) %}
    {% else %}
      {% set time = "%dm%02ds" % (m, s) %}
    {% endif %}
    INFO MSG="Heat-soaking for {time}..."

    _FILTER_HEATSOAK
    G4 P{heatsoak * 1000}
  {% endif %}

[gcode_macro _HEAT]
gcode:
  {% set hotend = params.HOTEND | float %}
  {% set bed = params.BED | float %}

  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set margin = vars.heat_margin %}

  INFO MSG="Heating up..."

  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={hotend}

  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed} MAXIMUM={bed + margin}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend} MAXIMUM={hotend + margin}

[gcode_macro _COOLDOWN]
gcode:
  TURN_OFF_HEATERS
  _FILTER_COOLDOWN

[delayed_gcode _HOTEND_FAN_CHECK_DELAYED]
gcode:
  _HOTEND_FAN_CHECK
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=3

[gcode_macro _HOTEND_FAN_CHECK]
variable_failure_count: 0
gcode:
  {% set min_rpm = 1000 %}
  {% set max_failures = 3 %}

  {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp | float %}
  {% set rpm = printer['heater_fan hotend_fan'].rpm | float %}
  {% set target = printer[printer.toolhead.extruder].target | float %}
  {% set temp = printer[printer.toolhead.extruder].temperature | float %}
  
  {% if (target >= fan_on_temp) and (temp > fan_on_temp) and (rpm < min_rpm) %}
    SET_GCODE_VARIABLE MACRO=_HOTEND_FAN_CHECK VARIABLE=failure_count VALUE={failure_count + 1}
    RESPOND TYPE=error MSG="Hotend fan detected off for {failure_count + 1} consecutive seconds (fan at {rpm} RPM, hotend at {temp}°C)"

    {% if failure_count + 1 > max_failures %}
      M400 ; wait for pending movements
      CANCEL_PRINT REASON=hotend-fan
    {% endif %}
  {% endif %}

[gcode_macro _ENABLE_HOTEND_FAN_CHECK]
gcode:
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=3

[gcode_macro _DISABLE_HOTEND_FAN_CHECK]
gcode:
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=0
