[gcode_macro _PREHEAT]
gcode:
  {% set bed = params.BED | float %}
  {% set hotend = params.HOTEND | float %}
  {% set chamber = params.CHAMBER | default(0) | float %}

  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set maxtime = vars.print_preheat_max_minutes %}
  {% set hotend_min = vars.print_preheat_min_hotend_temp %}
  {% set sensor = vars.print_chamber_sensor %}

  {% set current_ch_temp = printer["temperature_sensor %s" % (sensor,)].temperature | float %}
  {% set current_he_temp = printer.extruder.temperature | float %}
  {% set current_he_target = printer.extruder.target | float %}

  # TODO check if we need to wait for temp stabilization even without chamber temp

  {% if chamber and current_ch_temp < chamber  %}
    VERBOSE MSG="Heat-soaking chamber..."

    # Set bed temp and preheat toolhead
    {% if current_he_target < hotend_min %}
      M104 S{hotend_min}
    {% endif %}
    M140 S{bed}

    # Move toolhead to front center to distribute heat with part cooling fan
    _CG28 STATUS=heatsoak
    _PARK_TOOLHEAD POS=heatsoak
    M106 S255 ; part cooling fan on

    # TODO filter

    # Wait for chamber temp
    _WAIT_CHAMBER_TEMP TEMP={chamber} MAXTIME={maxtime}

    M107 ; fan off

    VERBOSE MSG="Heat-soak complete."
  {% else %}
    {% if chamber %}
      VERBOSE MSG="Heat-soak not needed, chamber at {current_ch_temp}°C."
    {% else %}
      VERBOSE MSG="Pre-heating hotend..."
    {% endif %}
  

    {% if current_he_target < hotend_min %}
      {% if current_he_temp < hotend_min %}
        M109 S{hotend_min}
      {% else %}
        # Hotend already hotter, just set the target but do not wait
        M104 S{hotend_min}
      {% endif %}
    {% endif %}

    {% if not chamber %}
      VERBOSE MSG="Pre-heat complete."
    {% endif %}
  {% endif %}

[gcode_macro _HEAT]
gcode:
  {% set bed = params.BED | float %}
  {% set hotend = params.HOTEND | float %}
  {% set chamber = params.CHAMBER | default(0) | float %}

  VERBOSE MSG="Heating up..."

  M104 S{hotend}
  M140 S{bed}
  M109 S{hotend}
  M190 S{bed}

[gcode_macro _WAIT_CHAMBER_TEMP]
gcode:
  {% set temp = params.TEMP | float %}
  {% set maxtime = params.MAXTIME | int %}

  {% for i in range(1, maxtime * 2) %}
    _WAIT_CHAMBER_TEMP_ONCE TEMP={temp}
  {% endfor %}

[gcode_macro _WAIT_CHAMBER_TEMP_ONCE]
gcode:
  {% set target = params.TEMP | float %}

  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set sensor = vars.print_chamber_sensor %}

  {% set current = printer["temperature_sensor %s" % (sensor,)].temperature | float %}

  {% if current < target %}
    VERBOSE MSG="Waiting for chamber temp: {current}°C / {target}°C"
    G4 P30000 ; wait 30 seconds
  {% endif %}

[delayed_gcode _HOTEND_FAN_CHECK_DELAYED]
gcode:
  _HOTEND_FAN_CHECK
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=3

[gcode_macro _HOTEND_FAN_CHECK]
variable_failure_count: 0
gcode:
  {% set min_rpm = 1000 %}
  {% set max_failures = 3 %}

  {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp | float %}
  {% set rpm = printer['heater_fan hotend_fan'].rpm | float %}
  {% set target = printer[printer.toolhead.extruder].target | float %}
  {% set temp = printer[printer.toolhead.extruder].temperature | float %}
  
  {% if (target >= fan_on_temp) and (temp > fan_on_temp) and (rpm < min_rpm) %}
    SET_GCODE_VARIABLE MACRO=_HOTEND_FAN_CHECK VARIABLE=failure_count VALUE={failure_count + 1}
    RESPOND MSG="Hotend fan detected off for {failure_count + 1} consecutive seconds (fan at {rpm} RPM, hotend at {temp}°C)"

    {% if failure_count + 1 > max_failures %}
      M400 ; wait for pending movements
      CANCEL_PRINT REASON=hotend-fan
    {% endif %}
  {% endif %}

[gcode_macro _ENABLE_HOTEND_FAN_CHECK]
gcode:
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=3

[gcode_macro _DISABLE_HOTEND_FAN_CHECK]
gcode:
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=0
