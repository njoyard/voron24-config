[gcode_macro HEATSOAK]
variable_running: False
gcode: 
  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}

  {% set bed = params.BED | default(vars.heatsoak_default_bed) | float %}
  {% set chamber = params.CHAMBER | default(vars.heatsoak_default_chamber) | float %}

  _SET_LIGHT_STATUS STATUS=heatsoak
  _PREHEAT BED={bed} CHAMBER={chamber}
  _SET_LIGHT_STATUS STATUS=idle SET_TIMEOUT=1
  _NOTIFY MSG="Heat-soak complete."

  # TODO setup some kind of timeout here (for bed heating / filter fan)

[gcode_macro _PREHEAT]
gcode:
  {% set bed = params.BED | float %}
  {% set chamber = params.CHAMBER | default(0) | float %}

  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set maxtime = vars.print_preheat_max_minutes %}
  {% set interval = vars.print_preheat_interval %}
  {% set sensor = vars.print_chamber_sensor %}
  {% set bed_time = vars.heatsoak_bed_wait_minutes %}
  {% set bed_thrs = vars.heatsoak_bed_wait_threshold %}

  {% set current_ch_temp = printer["temperature_sensor %s" % (sensor,)].temperature | float %}
  {% set current_bed_temp = printer.heater_bed.temperature | float %}

  {% set need_bed_heatsoak = current_bed_temp < bed_thrs %}

  {% if current_ch_temp < chamber  %}
    {% if need_bed_heatsoak %}
      INFO MSG="Heat-soaking chamber to {chamber}°C and bed for {bed_time} minutes..."
    {% else %}
      INFO MSG="Heat-soaking chamber to {chamber}°C..."
    {% endif %}

    # Set bed temp
    M140 S{bed}
    _FILTER_CHECK

    # Move toolhead to front center to get a proper idea of chamber temp
    _CG28
    _PARK_TOOLHEAD POS=heatsoak

    # Wait for chamber temp
    _WAIT_CHAMBER_TEMP TEMP={chamber} MINTIME={bed_time if need_bed_heatsoak else 0} MAXTIME={maxtime}

    INFO MSG="Heat-soak complete."
  {% elif need_bed_heatsoak %}
    INFO MSG="Chamber at {current_ch_temp}°C, heat-soaking bed for {bed_time} minutes..."
    
    # Set bed temp
    M140 S{bed}
    _FILTER_CHECK

    # Wait for bed temp
    M190 S{bed}
    _FILTER_CHECK

    # Wait for configured bed wait time
    G4 P{bed_time * 60000}
  {% else %}
    _FILTER_CHECK
    INFO MSG="Heat-soak not needed, chamber at {current_ch_temp}°C and bed is hot."
  {% endif %}

[gcode_macro _HEAT]
gcode:
  {% set bed = params.BED | float %}
  {% set hotend = params.HOTEND | float %}

  INFO MSG="Heating up..."

  M104 S{hotend}
  M140 S{bed}
  _FILTER_CHECK

  M109 S{hotend}
  M190 S{bed}
  _FILTER_CHECK

[gcode_macro _WAIT_CHAMBER_TEMP]
gcode:
  {% set temp = params.TEMP | float %}
  {% set mintime = params.MINTIME | default(0) | int %}
  {% set maxtime = params.MAXTIME | int %}

  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set interval = vars.print_preheat_interval %}
  
  {% set minloops = mintime * 60 / interval %}

  VERBOSE MSG="_wct interval={interval} mintime={mintime} maxtime={maxtime} minloops={minloops} maxloops={(maxtime * 60 / interval) | int}"

  {% for i in range(1, 1 + (maxtime * 60 / interval) | int) %}
    VERBOSE MSG="_wct once i={i} force={1 if i < minloops else 0}"
    _WAIT_CHAMBER_TEMP_ONCE TEMP={temp} FORCE={1 if i <= minloops else 0}
  {% endfor %}

[gcode_macro _WAIT_CHAMBER_TEMP_ONCE]
gcode:
  {% set target = params.TEMP | float %}
  {% set force = params.FORCE | default(0) %}

  {% set vars = printer["gcode_macro _USER_VARIABLES"] %}
  {% set sensor = vars.print_chamber_sensor %}
  {% set interval = vars.print_preheat_interval %}
  {% set current = printer["temperature_sensor %s" % (sensor,)].temperature | float %}

  {% if force or current < target %}
    G4 P{interval * 1000} ; wait interval
    _FILTER_CHECK
  {% endif %}

[delayed_gcode _HOTEND_FAN_CHECK_DELAYED]
gcode:
  _HOTEND_FAN_CHECK
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=3

[gcode_macro _HOTEND_FAN_CHECK]
variable_failure_count: 0
gcode:
  {% set min_rpm = 1000 %}
  {% set max_failures = 3 %}

  {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp | float %}
  {% set rpm = printer['heater_fan hotend_fan'].rpm | float %}
  {% set target = printer[printer.toolhead.extruder].target | float %}
  {% set temp = printer[printer.toolhead.extruder].temperature | float %}
  
  {% if (target >= fan_on_temp) and (temp > fan_on_temp) and (rpm < min_rpm) %}
    SET_GCODE_VARIABLE MACRO=_HOTEND_FAN_CHECK VARIABLE=failure_count VALUE={failure_count + 1}
    RESPOND TYPE=error MSG="Hotend fan detected off for {failure_count + 1} consecutive seconds (fan at {rpm} RPM, hotend at {temp}°C)"

    {% if failure_count + 1 > max_failures %}
      M400 ; wait for pending movements
      CANCEL_PRINT REASON=hotend-fan
    {% endif %}
  {% endif %}

[gcode_macro _ENABLE_HOTEND_FAN_CHECK]
gcode:
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=3

[gcode_macro _DISABLE_HOTEND_FAN_CHECK]
gcode:
  UPDATE_DELAYED_GCODE ID=_HOTEND_FAN_CHECK_DELAYED DURATION=0
